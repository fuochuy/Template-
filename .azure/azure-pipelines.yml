# Azure pipeline to build & deploy GoAdmin demo site
# https://docs.microsoft.com/azure/devops/pipelines/

trigger:
  batch: true
  branches:
    include:
    - '*'

pool:
  vmImage: ubuntu-latest

variables:
  - name: goVersion
    value: '1.17'
  - name: gogiter8Version
    value: '0.5.1'
  - name: dockerVersion
    value: '19.03.12'
  - name: GOBIN
    value: $(GOROOT)/bin
  - name: GO111MODULE
    value: 'on'
  - name: goBuiltAppName
    value: goadmin
  - name: sessionDirectory
    value: $(System.DefaultWorkingDirectory)/..
  - name: projectName
    value: goadmincp-seed
  - name: projectDirectory
    value: $(sessionDirectory)/$(projectName)
  - name: branchMasterChanged
    value: ${{ eq(variables['Build.SourceBranch'], 'refs/heads/master') }}
  - name: branchDemoBuildChanged
    value: ${{ eq(variables['Build.SourceBranch'], 'refs/heads/demo-build') }}
  - name: dockerHubRepoName
    value: goadmin-demo
  - name: goadminVersion
    value: r3
  - group: Release # merge with ADO env group named 'Release'

stages:
- stage: generate_and_build
  displayName: Generate and Build project
  jobs:
  - job: generate_and_build
    displayName: Generate project and build
    steps:
    - task: GoTool@0
      displayName: Prepare Go env
      inputs:
        version: '$(goVersion)'
    - task: Go@0
      inputs:
        # minimum go-giter8 v0.5.1 for "quiet" mode
        command: 'get'
        arguments: 'github.com/btnguyen2k/go-giter8/g8@v$(gogiter8Version)'
      displayName: Install go-giter8
    - script: |
        g8 new --no-inputs file://$(System.DefaultWorkingDirectory)
      displayName: Generate project using go-giter8
      workingDirectory: $(sessionDirectory)
    - script: cd $(projectDirectory) && go build -o $(goBuiltAppName) -tags netgo -a
      displayName: Build project

- stage: test
  displayName: Run tests
  dependsOn: generate_and_build
  jobs:
  - job: test_sqlite
    displayName: Run tests against SQLite
    steps:
    - task: GoTool@0
      displayName: Prepare Go env
      inputs:
        version: '$(goVersion)'
    - script: |
        export PWD=$(pwd)
        mkdir -p $PWD/temp
        export SQLITE_DRIVER="sqlite3"
        export SQLITE_URL="$PWD/temp/temp.db"
        cd $(System.DefaultWorkingDirectory)/src/main/g8 \
          && go test -v -p 1 -count 1 ./src/myapp/
      displayName: Run tests against SQLite
  - job: test_pgsql
    displayName: Run tests against PostgreSQL
    steps:
    - task: GoTool@0
      displayName: Prepare Go env
      inputs:
        version: '$(goVersion)'
    - script: |
        docker run -d --rm --name postgres -e POSTGRES_DB=test -e POSTGRES_USER=test -e POSTGRES_PASSWORD=test -p 5432:5432 postgres:11
        sleep 5
      displayName: Start PostgreSQL server
    - script: |
        export TIMEZONE="Asia/Ho_Chi_Minh"
        export PGSQL_DRIVER="pgx"
        export PGSQL_URL="postgres://test:test@localhost:5432/test?sslmode=disable&client_encoding=UTF-8&application_name=goadmin"
        cd $(System.DefaultWorkingDirectory)/src/main/g8 \
          && go test -v -p 1 -count 1 ./src/myapp/
      displayName: Run tests against PostgreSQL
  - job: test_mysql
    displayName: Run tests against MySQL
    steps:
    - task: GoTool@0
      displayName: Prepare Go env
      inputs:
        version: '$(goVersion)'
    - script: |
        docker run -d --rm --name mysql -e MYSQL_ROOT_PASSWORD=test -e MYSQL_DATABASE=test -e MYSQL_USER=test -e MYSQL_PASSWORD=test -p 3306:3306 mysql:8
        sleep 5
      displayName: Start MySQL server
    - script: |
        export TIMEZONE="Asia/Ho_Chi_Minh"
        export MYSQL_DRIVER="mysql"
        export MYSQL_URL="test:test@tcp(localhost:3306)/test?charset=utf8mb4,utf8&parseTime=true&loc=\${loc}"
        cd $(System.DefaultWorkingDirectory)/src/main/g8 \
          && go test -v -p 1 -count 1 ./src/myapp/
      displayName: Run tests against MySQL (parseTime=true)
    - script: |
        export TIMEZONE="Asia/Ho_Chi_Minh"
        export MYSQL_DRIVER="mysql"
        export MYSQL_URL="test:test@tcp(localhost:3306)/test?charset=utf8mb4,utf8&parseTime=false&loc=\${loc}"
        cd $(System.DefaultWorkingDirectory)/src/main/g8 \
          && go test -v -p 1 -count 1 ./src/myapp/
      displayName: Run tests against MySQL (parseTime=false)
  - job: test_mongo_standlone
    displayName: Run tests against MongoDB (standalone)
    steps:
    - task: GoTool@0
      displayName: Prepare Go env
      inputs:
        version: '$(goVersion)'
    - script: |
        docker run -d --rm --name mongodb -e MONGO_INITDB_ROOT_USERNAME=test -e MONGO_INITDB_ROOT_PASSWORD=test -e MONGO_INITDB_DATABASE=test -p 27017:27017 mongo:4.2
        sleep 5
      displayName: Start MongoDB server (standalone)
    - script: |
        export TIMEZONE="Asia/Ho_Chi_Minh"
        export MONGO_DB="test"
        export MONGO_URL="mongodb://test:test@localhost:27017/?authSource=admin"
        cd $(System.DefaultWorkingDirectory)/src/main/g8 \
          && go test -v -p 1 -count 1 ./src/myapp/
      displayName: Run tests against MongoDB (standalone)
  - job: test_mongo_replicaset
    displayName: Run tests against MongoDB (replicaset)
    steps:
    - task: GoTool@0
      displayName: Prepare Go env
      inputs:
        version: '$(goVersion)'
    - script: |
        docker run -d --rm --name mongodb-replset -e MONGODB_REPLICA_SET_MODE=primary -e MONGODB_REPLICA_SET_KEY=myreplset -e MONGODB_ADVERTISED_HOSTNAME=localhost -e MONGODB_PRIMARY_PORT_NUMBER=27017 -e MONGODB_ROOT_PASSWORD=test -e MONGODB_DATABASE=test -p 27017:27017 bitnami/mongodb:4.2
        sleep 5
      displayName: Start MongoDB server (replicaset)
    - script: |
        export TIMEZONE="Asia/Ho_Chi_Minh"
        export MONGO_DB="test"
        export MONGO_URL="mongodb://root:test@localhost:27017/?authSource=admin&replicaSet=replicaset"
        cd $(System.DefaultWorkingDirectory)/src/main/g8 \
          && go test -v -p 1 -count 1 ./src/myapp/
      displayName: Run tests against MongoDB (replicaset)

- stage: build_dockerhub
  displayName: Build image and publish to Docker Hub
  dependsOn: test
  condition: eq(variables['branchDemoBuildChanged'], true)
  jobs:
  - job: generate_build_publish
    displayName: Generate project, build Docker image and publish
    steps:
    - task: GoTool@0
      displayName: Prepare Go env
      inputs:
        version: '$(goVersion)'
    - script: |
        APP_VERSION='$(goadminVersion)'
        echo '##vso[task.setvariable variable=APP_VERSION]'$APP_VERSION
        APP_VERSION_BUILD=${APP_VERSION}-b$(Build.BuildId)
        echo '##vso[task.setvariable variable=APP_VERSION_BUILD]'$APP_VERSION_BUILD
        sed -i 's/version\s*=.*$/version = ${APP_VERSION_BUILD}/' ./src/main/g8/default.properties
      displayName: Init app name, version and build id
    - task: Go@0
      inputs:
        # minimum go-giter8 v0.5.1 for "quiet" mode
        command: 'get'
        arguments: 'github.com/btnguyen2k/go-giter8/g8@v$(gogiter8Version)'
      displayName: Install go-giter8
    - script: |
        g8 new --no-inputs file://$(System.DefaultWorkingDirectory)
        echo swapping directories...
        rm -rf $(System.DefaultWorkingDirectory)/*
        cp -r $(projectDirectory)/* $(System.DefaultWorkingDirectory)/
      displayName: Generate project using go-giter8
      workingDirectory: $(sessionDirectory)
    - task: Docker@2
      displayName: Build and Publish Docker image
      inputs:
        command: buildAndPush
        containerRegistry: '$(DockerRegistry)'
        repository: '$(DockerRegistryAccount)/$(dockerHubRepoName)'
        tags: |
          $(APP_VERSION)
          $(APP_VERSION_BUILD)
          latest
    - script: |
        echo '##vso[task.setvariable variable=APP_VERSION_BUILD;isOutput=true]'$APP_VERSION_BUILD
      displayName: Transfer variables to next stages
      name: transfer_variables

- stage: deploy_demo
  displayName: Deploy to demo site
  dependsOn: build_dockerhub
  variables:
    APP_VERSION_BUILD: $[ stageDependencies.build_dockerhub.generate_build_publish.outputs['transfer_variables.APP_VERSION_BUILD'] ]
  jobs:
  - job: deploy_demo
    displayName: Deploy to demo site
    steps:
    - script: |
        echo '##vso[task.setvariable variable=dockerImageTag]$(APP_VERSION_BUILD)'
      displayName: Set Docker image tag
    - script: |
        echo '##vso[task.setvariable variable=dockerImageTag]latest'
      displayName: Set Docker image tag to latest if not specified
      condition: eq(variables['APP_VERSION_BUILD'], '')                  
    - task: AzureCLI@2
      inputs:
        azureSubscription: $(AzureSubscription)
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          az config set extension.use_dynamic_install=yes_without_prompt
          az containerapp update \
            --name $(ContainerAppName) \
            --resource-group $(ResourceGroupName) \
            --container-name $(ContainerAppContainerName) \
            --image docker.io/$(DockerRegistryAccount)/$(dockerHubRepoName):$(APP_VERSION_BUILD)
